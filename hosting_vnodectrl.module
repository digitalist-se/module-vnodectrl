<?php
// $Id$

/**
 * @file
 * Main module file for the hosting_vnodectrl aegir frontend.
 */

/**
 * Implementation of hook_perm():
 */
function hosting_vnodectrl_perm() {
  return array('administer vnodectrl');
}

function hosting_vnodectrl_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'server_node_form') {
    $node = $form['#node'];
    $form['provider'] = array(
      '#type' => 'select',
      '#title' => t('Provider'),
      '#default_value' => $node->provider,
      '#options' => hosting_vnodectrl_get_providers(),
    );
    $form['image'] = array(
      '#type' => 'select',
      '#title' => t('Image'),
      '#default_value' => $node->image,
      '#options' => hosting_vnodectrl_get_images($node->provider),
    );
    $form['size'] = array(
      '#type' => 'select',
      '#title' => t('Size'),
      '#default_value' => $node->size,
      '#options' => hosting_vnodectrl_get_sizes($node->provider),
    );
    $form['instance_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Instance id'),
      '#default_value' => $node->instance_id,
      '#description' => t('The instance ID that identifies this server uniquely.'),
    );
  }
}

function hosting_vnodectrl_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  $function = 'hosting_vnodectrl_' . $op;
  if (function_exists($function)) {
    return $function($node);
  }
}

function hosting_vnodectrl_validate($node) {
  // @todo validate machine name
}

function hosting_vnodectrl_insert(&$node) {
  drupal_write_record('hosting_vnodectrl_instance', $node);
}

function hosting_vnodectrl_update(&$node) {
  db_query("UPDATE hosting_vnodectrl_instance SET provider = '%s', name = '%s', image = '%s', size = '%s', instance_id = '%s' WHERE nid = %d AND vid = %d",
  $node->provider,
  $node->title,
  $node->image,
  $node->size,
  $node->instance_id,
  $node->nid,
  $node->vid);
}

function hosting_vnodectrl_load(&$node) {
  return db_fetch_array(db_query("SELECT provider, name, image, size, instance_id FROM {hosting_vnodectrl_instance} WHERE nid = %d AND vid = %d", $node->nid, $node->vid));
}

/**
 * Get a list of images available from the given provider.
 */
function hosting_vnodectrl_get_images() {
  $images = array();
  $result = db_query("SELECT provider, id, name FROM {hosting_vnodectrl_images}");
  while ($image = db_fetch_object($result)) {
    $images[$image->provider][$image->id] = $image->id;
  }
  return $images;
}

/**
 * Get a list of available images for a particular provider.
 */
function hosting_vnodectrl_get_sizes($provider) {
  // @todo Actually fetch this through hosting_vnodectrl.
  return array(
    't1.micro' => 'Micro Instance',
    'm1.small' => 'Small Instance',
    'm1.large' => 'Large Instance',
    'm1.xlarge' => 'Extra Large Instance',
    'c1.medium' => 'High-CPU Medium Instance',
    'c1.xlarge' => 'High-CPU Extra Large Instance',
    'm2.xlarge' => 'High-Memory Extra Large Instance',
    'm2.2xlarge' => 'High-Memory Double Extra Large Instance',
    'm2.4xlarge' => 'High-Memory Quadruple Extra Large Instance',
    'cg1.4xlarge'=> 'Cluster GPU Quadruple Extra Large Instance',
    'cc1.4xlarge'=> 'Cluster Compute Quadruple Extra Large Instance',
  );
}

/**
 * Get a list of available providers.
 */
function hosting_vnodectrl_get_providers() {
  // @todo Actually fetch this from vnodectrl.
  return array(
    'ec2-europe' => 'ec2-europe',
  );
}

/**
 * Implementation of hook_hosting_tasks().
 */
function hosting_vnodectrl_hosting_tasks() {
  $tasks = array();
  $tasks['server']['create-server'] = array(
    'title' => t('Create'),
    'description' => t('Create the instance.'),
    'access callback' => 'hosting_vnodectrl_task_access'
  );
  $tasks['server']['delete-server'] = array(
    'title' => t('Delete'),
    'description' => t('Delete the instance.'),
  	'access callback' => 'hosting_vnodectrl_task_access'
  );
  return $tasks;
}

function hosting_vnodectrl_task_access($node, $task) {
  return TRUE;
}
